// Code generated by MockGen. DO NOT EDIT.
// Source: C:/Go_Homework/AnyProject/pkg/repository/repository.go

// Package mock_repository is a generated AnyProject package.
package mocked

import (
	models "project/pkg/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockInterfaceRepository is a mock of InterfaceRepository interface.
type MockInterfaceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceRepositoryMockRecorder
}

// MockInterfaceRepositoryMockRecorder is the mock recorder for MockInterfaceRepository.
type MockInterfaceRepositoryMockRecorder struct {
	mock *MockInterfaceRepository
}

// NewMockInterfaceRepository creates a new mock instance.
func NewMockInterfaceRepository(ctrl *gomock.Controller) *MockInterfaceRepository {
	mock := &MockInterfaceRepository{ctrl: ctrl}
	mock.recorder = &MockInterfaceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterfaceRepository) EXPECT() *MockInterfaceRepositoryMockRecorder {
	return m.recorder
}

// GetOrderById mocks base method.
func (m *MockInterfaceRepository) GetOrderById(id int) models.Order {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderById", id)
	ret0, _ := ret[0].(models.Order)
	return ret0
}

// GetOrderById indicates an expected call of GetOrderById.
func (mr *MockInterfaceRepositoryMockRecorder) GetOrderById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderById", reflect.TypeOf((*MockInterfaceRepository)(nil).GetOrderById), id)
}

// GetOrders mocks base method.
func (m *MockInterfaceRepository) GetOrders() ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders")
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockInterfaceRepositoryMockRecorder) GetOrders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockInterfaceRepository)(nil).GetOrders))
}

// SetOrder mocks base method.
func (m *MockInterfaceRepository) SetOrder(o models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOrder", o)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOrder indicates an expected call of SetOrder.
func (mr *MockInterfaceRepositoryMockRecorder) SetOrder(o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOrder", reflect.TypeOf((*MockInterfaceRepository)(nil).SetOrder), o)
}
